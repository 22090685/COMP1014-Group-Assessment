knitr::opts_chunk$set(echo = TRUE)
rbinom(1, size=3, prob=0.5)
### Direct count randomisation
```{r}
### Direct count randomisation
```{r}
### Direct count randomisation
```{r}
rbinom(10, 3, 0.5)
### Direct count randomisation
```{r}
### Direct count randomisation
```{r}
rbinom(10, 3, 0.5)
rbinom(10, size=3, prob=0.5) #Directly generates a random count
rbinom(1, size=3, prob=0.5) #Directly generates a random count
rbinom(1, size=3, prob=0.5) #Directly generates a random count
choose(4,2)
choose(4,2)
dbinom(0:3, size = 3, prob = 0.5)
dbinom(0:5, size = 20, prob = 0.1)
graph(x)
x <- dbinom(0:5, size = 20, prob = 0.1)
graph(x)
plot(x)
barplot(x)
choose(4,2) # how many ways to get 2 heads from 4 coin tosses
dbinom(0:3, size = 3, prob = 0.5) # Probability of 0 through 3 heads from 3 coin tosses
b = rbinom(1000, size = 3, prob = 0.5)
knitr::opts_chunk$set(echo = TRUE)
x = sample(c("T","H"), replace=TRUE, size=3) #Create a vector containing 3 instances of "T" and "H"
sum(x=="H") #print sum of "H" instances
rbinom(1, size=3, prob=0.5) #Directly generates a random count
rbinom(10, 3, 0.5)
# number of trials = 10, flips per trial = 3, probability of success = 0.5
choose(4,2) # how many ways to get 2 heads from 4 coin tosses
dbinom(0:3, size = 3, prob = 0.5) # Probability of 0 through 3 heads from 3 coin tosses
b = rbinom(1000, size = 3, prob = 0.5)
mean(b) # Approx 1.5 (n*p = 3 * 0.5)
b = rbinom(1000, size = 3, prob = 0.5)
mean(b) # Approx 1.5 (n*p = 3 * 0.5)
var(b)
b = rbinom(1000, size = 3, prob = 0.5)
b = rbinom(1000, size = 3, prob = 0.5)
b = rbinom(1000, size = 3, prob = 0.5)
mean(b) # Approx 1.5 (n*p = 3 * 0.5)
b = rbinom(1000, size = 3, prob = 0.5)
mean(b) # Approx 1.5 (n*p = 3 * 0.5)
var(b)
var(b)
b = rbinom(1000, size = 3, prob = 0.5)
mean(b) # Approx 1.5 (n*p = 3 * 0.5)
var(b)
b = rbinom(100, size = 3, prob = 0.1)
mean(b) # Approx 1.5 (n*p = 3 * 0.5)
var(b) # approx 0.75 (n*p*(1-p) = 3 * 0.5 * 0.5)
var(b) # approx 0.75 (n*p*(1-p) = 3 * 0.5 * 0.5)
mean(b) # Approx 1.5 (n*p = 3 * 0.5)
var(b) # approx 0.75 (n*p*(1-p) = 3 * 0.5 * 0.5)
mean(b) # Approx 1.5 (n*p = 3 * 0.5)
b = rbinom(100, size = 3, prob = 0.1)
b = rbinom(100, size = 3, prob = 0.1)
mean(b) # Approx 1.5 (n*p = 3 * 0.5)
var(b) # approx 0.75 (n*p*(1-p) = 3 * 0.5 * 0.5)
b = rbinom(100, size = 3, prob = 0.1)
mean(b) # Approx 1.5 (n*p = 3 * 0.5)
var(b) # approx 0.75 (n*p*(1-p) = 3 * 0.5 * 0.5)
b = rbinom(100, size = 3, prob = 0.1)
mean(b) # Approx 1.5 (n*p = 3 * 0.5)
var(b) # approx 0.75 (n*p*(1-p) = 3 * 0.5 * 0.5)
b = rbinom(100, size = 3, prob = 0.1)
mean(b) # Approx 1.5 (n*p = 3 * 0.5)
var(b) # approx 0.75 (n*p*(1-p) = 3 * 0.5 * 0.5)
b = rbinom(100, size = 3, prob = 0.1)
mean(b) # Approx 1.5 (n*p = 3 * 0.5)
var(b) # approx 0.75 (n*p*(1-p) = 3 * 0.5 * 0.5)
b = rbinom(100, size = 3, prob = 0.1)
mean(b) # Approx 1.5 (n*p = 3 * 0.5)
var(b) # approx 0.75 (n*p*(1-p) = 3 * 0.5 * 0.5)
b = rbinom(100, size = 3, prob = 0.1)
mean(b) # Approx 1.5 (n*p = 3 * 0.5)
var(b) # approx 0.75 (n*p*(1-p) = 3 * 0.5 * 0.5)
b = rbinom(1000, size = 3, prob = 0.5)
mean(b) # Approx 1.5 (n*p = 3 * 0.5)
var(b) # approx 0.75 (n*p*(1-p) = 3 * 0.5 * 0.5)
b = rbinom(1000, size = 3, prob = 0.5)
mean(b) # Approx 1.5 (n*p = 3 * 0.5)
var(b) # approx 0.75 (n*p*(1-p) = 3 * 0.5 * 0.5)
### Direct count randomisation
```{r}
### Hypothesis Test for a Difference in Proportions
#### Chi-Square Test to compare proportions
```{r}
### Hypothesis Test for a Difference in Proportions
#### Chi-Square Test to compare proportions
```{r}
### Hypothesis Test for a Difference in Proportions
#### Chi-Square Test to compare proportions
```{r }
print(tab)
tab = matrix(c(12,100-12,188,1000-188), ncol=2)
dimnames(tab) = list(c("disease", "no disease"), c("Trump","Clinton"))
print(tab)
knitr::opts_chunk$set(echo = TRUE)
x = sample(c("T","H"), replace=TRUE, size=3) #Create a vector containing 3 instances of "T" and "H"
sum(x=="H") #print sum of "H" instances
rbinom(1, size=3, prob=0.5) #Directly generates a random count
rbinom(10, 3, 0.5)
# number of trials = 10, flips per trial = 3, probability of success = 0.5
choose(4,2) # how many ways to get 2 heads from 4 coin tosses
dbinom(0:3, size = 3, prob = 0.5) # Probability of 0 through 3 heads from 3 coin tosses
b = rbinom(1000, size = 3, prob = 0.5)
mean(b) # Approx 1.5 (n*p = 3 * 0.5)
var(b) # approx 0.75 (n*p*(1-p) = 3 * 0.5 * 0.5)
tab = matrix(c(12,100-12,188,1000-188), ncol=2)
dimnames(tab) = list(c("disease", "no disease"), c("Trump","Clinton"))
print(tab)
test=chisq.test(tab,correct=FALSE)
test$expected
test
test=chisq.test(tab,correct=FALSE)
test$expected
test
barplot(horsekick, col="lightblue")
horsekick = c(109,65,22,3,1)
names(horsekick) = 0:4
print(horsekick)
barplot(horsekick, col="lightblue")
setwd("~/Github/University/Autumn2025/Comp1014/Assignment")
```{r setup, include=FALSE}
tinytex::install_tinytex()
knitr::opts_chunk$set(echo = TRUE)
tinytex::install_tinytex()
y
Y
tinytex::install_tinytex()
### ASSIGNMENT CASE
### -----------------------
### Australian Neuroplasticity and Learning Efficiency Study
Sleep quality and cognitive function play a vital role in overall well-being and
knitr::opts_chunk$set(echo = TRUE)
tinytex::install_tinytex(force = TRUE)
